// handler pour ajouter un commentaire
func AddCommentHandler(w http.ResponseWriter, r *http.Request) {
	var input struct {
		IdUser  int    `json:"id_user"`
		IdTrack int    `json:"id_track"`
		Contenu string `json:"contenu"`
	}

	if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
		http.Error(w, "Invalid input", http.StatusBadRequest)
		return
	}

	_, err := db.Exec(
		"INSERT INTO Commentaires (id_user, id_track, contenu, date_commentaire) VALUES ($1, $2, $3, NOW())",
		input.IdUser, input.IdTrack, input.Contenu,
	)
	if err != nil {
		http.Error(w, "Error adding comment", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusCreated)
}

// handler pour récupérer les commentaires d'un morceau
func GetCommentsHandler(w http.ResponseWriter, r *http.Request) {
	trackID := r.URL.Query().Get("track_id")
	if trackID == "" {
		http.Error(w, "Track ID is required", http.StatusBadRequest)
		return
	}

	rows, err := db.Query(`
        SELECT c.id, c.contenu, c.date_commentaire, 
               u.id as user_id, u.username as user_name
        FROM Commentaires c
        JOIN  up_users u ON c.id_user = u.id
        WHERE c.id_track = $1
        ORDER BY c.date_commentaire DESC;
    `, trackID)
	if err != nil {
		http.Error(w, "Error fetching comments", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var comments []map[string]interface{}
	for rows.Next() {
		var idCommentaire, userID int
		var contenu, dateCommentaire, userName string

		if err := rows.Scan(&idCommentaire, &contenu, &dateCommentaire, &userID, &userName); err != nil {
			http.Error(w, "Error reading comment", http.StatusInternalServerError)
			return
		}

		comments = append(comments, map[string]interface{}{
			"id":      idCommentaire,
			"content": contenu,
			"date":    dateCommentaire,
			"user": map[string]interface{}{
				"id":   userID,
				"name": userName,
			},
		})
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(comments)
}

// handler pour supprimer un commentaire
func DeleteCommentHandler(w http.ResponseWriter, r *http.Request) {
	var input struct {
		IdComment int `json:"id"`
		IdUser    int `json:"id_user"`
	}

	if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
		http.Error(w, "Invalid input", http.StatusBadRequest)
		return
	}

	// Vérification que l'utilisateur est bien l'auteur
	var authorID int
	err := db.QueryRow("SELECT id_user FROM Commentaires WHERE id = $1", input.IdComment).Scan(&authorID)
	if err != nil {
		http.Error(w, "Comment not found", http.StatusNotFound)
		return
	}

	if authorID != input.IdUser {
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}

	_, err = db.Exec("DELETE FROM Commentaires WHERE id = $1", input.IdComment)
	if err != nil {
		http.Error(w, "Error deleting comment", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}

// handler pour mettre à jour un commentaire
func UpdateCommentHandler(w http.ResponseWriter, r *http.Request) {
	var input struct {
		IdComment int    `json:"id"`
		IdUser    int    `json:"id_user"`
		Contenu   string `json:"contenu"`
	}

	if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
		http.Error(w, "Invalid input", http.StatusBadRequest)
		return
	}

	var authorID int
	err := db.QueryRow("SELECT id_user FROM Commentaires WHERE id = $1", input.IdComment).Scan(&authorID)
	if err != nil {
		http.Error(w, "Comment not found", http.StatusNotFound)
		return
	}

	if authorID != input.IdUser {
		http.Error(w, "Unauthorized: You can only edit your own comments", http.StatusUnauthorized)
		return
	}

	_, err = db.Exec(
		"UPDATE Commentaires SET contenu = $1, date_commentaire = NOW() WHERE id = $2",
		input.Contenu, input.IdComment,
	)
	if err != nil {
		http.Error(w, "Error updating comment", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}
